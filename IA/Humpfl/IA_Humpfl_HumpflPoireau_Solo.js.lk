//##################################################################################################################
//#                                                   GLOBALS                                                      #
//##################################################################################################################
global turn = 0;
global myWeapons = getWeapon();
global myChips = getChips();
global mychipsCd = [];
global curentEnemy;
global enemies = getEnemies();//Niv 16
global me = getLeek();
global allies = getAliveAllies();//Niv 14

global CAT_ATK = "CAT_ATK";
global CAT_DEF = "CAT_DEF";
global CAT_BUF = "CAT_BUF";
global CAT_VIE = "CAT_VIE";
global CAT_DEBUF = "CAT_DEBUF";

global RANGE_NORMAL = "RANGE_NORMAL";
global RANGE_INLINE = "RANGE_INLINE";

global SPECIAL_DAMAGE_SUP = "SPECIAL_DAMAGE_SUP";
global SPECIAL_DAMAGE_OVER_TIME = "SPECIAL_DAMAGE_OVER_TIME";

global ACTION_USE_WEAPON = "ACTION_USE_WEAPON";
global ACTION_EQUIP_WEAPON = "ACTION_EQUIP_WEAPON";
global ACTION_USE_CHIP = "ACITON_USE_CHIP";
global ACTION_MOVETOWARD = "ACTION_MOVETOWARD";
global ACTION_MOVEAWAY = "ACTION_MOVEAWAY";

global BAD_ACTION_TYPE = "BAD_ACTION_TYPE";

global C_IMPORTANCE_FORCE = 3;//Coefficient représentant l'importange de la force pour le calcul de puissance/comparaison
global C_IMPORTANCE_AGILITY = 1;//Coefficient représentant l'importange de l'agilitépour le calcul de puissance/comparaison


//##################################################################################################################
//#                                                   DATA TYPE                                                    #
//##################################################################################################################

/**
 * renvoie l'élément qui a pour clé key
 */
function getItem(key, dict) {
	for (var item in dict) {
		if (inArray(item, key)) {
			return item[1];
		}
	}
	return null;
}

/**
 * supprime l'élément qui a la clé key
 */
function deleteItem(key, dict) {
	for (var i = 0; i < count(dict); i++) {
		if (inArray(dict[i], key)) {
			remove(dict, i);
			return 1;
		}
	}
	return -1;
}

/**
 * ajoute un élément qui a pour clé key et valeur value
 */
function setItem(key, value, dict) {
	deleteItem(key, dict);
	push(dict, [key, value]);
}

//##################################################################################################################
//#                                                   FUNCTIONS                                                    #
//##################################################################################################################

/**
 * globals for function myGetWeaponEffects
 */
global WEAPONEF_RANGE_MIN =0;
global WEAPONEF_RANGE_MAX = 1;
global WEAPONEF_DAMAGE_MIN = 2;
global WEAPONEF_DAMAGE_MAX = 3;
global WEAPONEF_COST = 3;
global WEAPONEF_ISEQUIPED = 4;
global WEAPONEF_RANGETYPE = 5;
global WEAPONEF_FAILRATE = 6;
global WEAPONEF_OTHER_EFFECTS = 7;
/**
 * [myGetWeaponEffects description]
 * renvoie les effets d'uner arme :
 * [min_range, max_range, min_damage, max_damage, shotSCost, isEquiped, rangeType, failRate, specialEffects]
 * 0 : portée min
 * 1 : portée max
 * 2 : dégats min
 * 3 : dégats max
 * 4 : cout du tir
 * 5 : arme équipée ? 
 * 6 : portée normale ou en ligne
 * 7 : taux d'échec
 * 8 : autres effet
 * @param  {[type]} weapon [description]
 * @return {[type]}        [description]
 */
function myGetWeaponEffects(weapon){
	if(weapon==WEAPON_PISTOL){
		var isEquiped = false;
		if(getWeapon()==weapon){isEquiped=true;}
		return[/*min_range*/0, /*max_range*/7, /*min_damage*/15, /*max_damage*/20,
			   /*shotCost*/3, /*isEquiped*/isEquiped, /*rangeType*/RANGE_NORMAL, /*failRate*/0.05,
			   /*special*/[]];
	}
	if(weapon==WEAPON_MACHINE_GUN){
		var isEquiped = false;
		if(getWeapon()==weapon){isEquiped=true;}
		return[/*min_range*/1, /*max_range*/6, /*min_damage*/20, /*max_damage*/24,
			   /*shotCost*/4, /*isEquiped*/isEquiped, /*rangeType*/RANGE_INLINE, /*failRate*/0.07,
			   /*special*/[]];
	}
	if(weapon==WEAPON_DOUBLE_GUN){
		var isEquiped = false;
		if(getWeapon()==weapon){isEquiped=true;}
		return[/*min_range*/2, /*max_range*/7, /*min_damage*/18, /*max_damage*/25,
			   /*shotCost*/4, /*isEquiped*/isEquiped, /*rangeType*/RANGE_NORMAL, /*failRate*/0.06,
			   /*special*/[[SPECIAL_DAMAGE_SUP, /*min_damage*/5, /*max_damage*/8]
			   			  ]
			  ];
	}
	if(weapon==WEAPON_SHOTGUN){
		var isEquiped = false;
		if(getWeapon()==weapon){isEquiped=true;
		return[/*min_range*/1, /*max_range*/5, /*min_damage*/33, /*max_damage*/43,/*failRate*/0.10,
			   /*shotCost*/5, /*isEquiped*/isEquiped, /*rangeType*/RANGE_INLINE, 
			   /*special*/[]];
	}
	if(weapon==WEAPON_MAGNUM){
		var isEquiped = false;
		if(getWeapon()==weapon){isEquiped=true;}
		return[/*min_range*/1, /*max_range*/8, /*min_damage*/25, /*max_damage*/40,/*failRate*/0.04,
			   /*shotCost*/5, /*isEquiped*/isEquiped, /*rangeType*/RANGE_NORMAL, 
			   /*special*/[]];
	}
	if(weapon==WEAPON_LASER){
		var isEquiped = false;
		if(getWeapon()==weapon){isEquiped=true;}
		return[/*min_range*/2, /*max_range*/7, /*min_damage*/43, /*max_damage*/59,/*failRate*/0.09,
			   /*shotCost*/6, /*isEquiped*/isEquiped, /*rangeType*/RANGE_INLINE, 
			   /*special*/[]];
	}
}

/**
 * globals for myGetChipEffects
 */
global CHIPEF_ACTUALCD = 0;
global CHIPEF_TOTALCD = 1;
global CHIPEF_RANGE_MIN = 2;
global CHIPEF_RANGE_MAX = 3;
global CHIPEF_CAT = 4;
global CHIPEF_STAT_MIN = 5;
global CHIPEF_STAT_MAX = 6;
global CHIPEF_FAILRATE = 7;
global CHIPEF_COST = 8;
global CHIPEF_RANGETYPE = 9;
global CHIPEF_OTHER_EFFECTS = 10;
/**
 * renvoie les effets d'une chip :
 * [Curent_cd, max_cd, min_range, max_range, cat, minDamage/heal/bouclier, maxDamage/bouclier/heal, fail_rate, cost]
 * 0 : cooldown actuel
 * 1 : cooldown total
 * 2 : portée minimum
 * 3 : portée maximum
 * 4 : catégorie
 * 5 : plage de dégats/heal/bouclier minimum
 * 6 : plage de dégats/heal/bouclier maximum
 * 7 : taux d'échec
 * 8 : cout en PT
 * 9 : portée normale ou en ligne (à ajouter)
 * 10: autre effets (à ajouter)
 */
function myGetChipEffects(chip) {
	if (chip == CHIP_BANDAGE) {
		return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/1, /*minRange*/0, 
				/*maxRange*/6,/*cat*/CAT_VIE ,/*min*/10,/*max*/ 15, 
				/*fail*/0.05,/*cost*/ 2];
	}
	if (chip == CHIP_CURE) {
		return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/2, /*minRange*/0, 
				/*maxRange*/5,/*cat*/CAT_VIE ,/*min*/35,/*max*/ 53, 
				/*fail*/0.08,/*cost*/ 4];
	}
	if (chip == CHIP_DRIP) {
		return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/3, /*minRange*/2, 
				/*maxRange*/6,/*cat*/CAT_VIE ,/*min*/35,/*max*/ 40, 
				/*fail*/0.07,/*cost*/ 5];
	} //zone
	if (chip == CHIP_VACCINE) {
		return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/3, /*minRange*/0, 
				/*maxRange*/6,/*cat*/CAT_VIE ,/*min*/30,/*max*/ 32, 
				/*fail*/0.07,/*cost*/ 6];
	}
	if (chip == CHIP_RESURRECTION) {
		return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/64, /*minRange*/0, 
				/*maxRange*/3,/*cat*/CAT_VIE ,/*min*/200,/*max*/ 200, 
				/*fail*/0.25,/*cost*/ 8];
	} //ressusiter
	if (chip == CHIP_STRETCHING) {
	return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/3, /*minRange*/0, 
				/*maxRange*/5,/*cat*/CAT_BUF ,/*min*/50,/*max*/ 50, 
				/*fail*/0.05,/*cost*/ 3];
	} //+agi
	if (chip == CHIP_PROTEIN) {
	return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/3, /*minRange*/0, 
				/*maxRange*/4,/*cat*/CAT_BUF ,/*min*/50,/*max*/ 50, 
				/*fail*/0.06,/*cost*/ 3];
	} //+force
	if (chip == CHIP_MOTIVATION) {
	return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/3, /*minRange*/0, 
				/*maxRange*/5,/*cat*/CAT_BUF ,/*min*/1,/*max*/ 1, 
				/*fail*/0.06,/*cost*/ 3];
	} //+PT
	if (chip == CHIP_LEATHER_BOOTS) {
	return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/3, /*minRange*/0, 
				/*maxRange*/5,/*cat*/CAT_BUF ,/*min*/1,/*max*/ 1, 
				/*fail*/0.05,/*cost*/ 3];
	} //+PM
	if (chip == CHIP_STEROID) {
	return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/4, /*minRange*/0, 
				/*maxRange*/4,/*cat*/CAT_BUF ,/*min*/100,/*max*/ 100, 
				/*fail*/0.05,/*cost*/ 6];
	} //+force
	if (chip == CHIP_WARM_UP) {
	return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/4, /*minRange*/0, 
				/*maxRange*/4,/*cat*/CAT_BUF ,/*min*/100,/*max*/ 100, 
				/*fail*/0.08,/*cost*/ 6];
	} //+agi
	if (chip == CHIP_WINGED_BOOTS) {
	return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/4, /*minRange*/0, 
				/*maxRange*/3,/*cat*/CAT_BUF ,/*min*/1,/*max*/ 1, 
				/*fail*/0.10,/*cost*/ 4];
	} //+PM zone
	if (chip == CHIP_ADRENALINE) {
	return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/4, /*minRange*/0, 
				/*maxRange*/5,/*cat*/CAT_BUF ,/*min*/1,/*max*/ 1, 
				/*fail*/0.08,/*cost*/ 5];
	} //+PT zone
	if (chip == CHIP_REFLEXES) {
	return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/5, /*minRange*/0, 
				/*maxRange*/3,/*cat*/CAT_BUF ,/*min*/200,/*max*/ 200, 
				/*fail*/0.06,/*cost*/ 8];
	} //+agi
	if (chip == CHIP_DOPING) {
	return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/5, /*minRange*/0, 
				/*maxRange*/5,/*cat*/CAT_BUF ,/*min*/200,/*max*/ 200, 
				/*fail*/0.14,/*cost*/ 7];
	} //+force
	if (chip == CHIP_SEVEN_LEAGUE_BOOTS) {
	return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/5, /*minRange*/0, 
				/*maxRange*/2,/*cat*/CAT_BUF ,/*min*/2,/*max*/ 4, 
				/*fail*/0.07,/*cost*/ 6];
	} //+PM
	if (chip == CHIP_RAGE) {
	return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/5, /*minRange*/0, 
				/*maxRange*/3,/*cat*/CAT_BUF ,/*min*/2,/*max*/ 4, 
				/*fail*/0.12,/*cost*/ 7];
	} //+PT
	if (chip == CHIP_LIBERATION) {
		return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/5, /*minRange*/0, 
				/*maxRange*/6,/*cat*/CAT_DEBUF ,/*min*/0,/*max*/ 0, 
				/*fail*/0.07,/*cost*/ 5];
	}
	if (chip == CHIP_HELMET) {
		return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/4, /*minRange*/0, 
				/*maxRange*/4,/*cat*/CAT_DEF ,/*min*/15,/*max*/ 15, 
				/*fail*/0.10,/*cost*/ 4]; //+flat
	}
	if (chip == CHIP_WALL) {
		return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/5, /*minRange*/0, 
				/*maxRange*/3,/*cat*/CAT_DEF ,/*min*/0.15,/*max*/ 0.15, 
				/*fail*/0.06,/*cost*/ 4]; //+rel
	}
	if (chip == CHIP_SHIELD) {
		return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/3, /*minRange*/0, 
				/*maxRange*/4,/*cat*/CAT_DEF ,/*min*/8,/*max*/ 8, 
				/*fail*/0.05,/*cost*/ 3]; //+flat
	}
	if (chip == CHIP_RAMPART) {
		return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/4, /*minRange*/2, 
				/*maxRange*/7,/*cat*/CAT_DEF ,/*min*/0.25,/*max*/ 0.25, 
				/*fail*/0.05,/*cost*/ 6]; //+rel
	}
	if (chip == CHIP_ARMOR) {
		return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/5, /*minRange*/0, 
				/*maxRange*/4,/*cat*/CAT_DEF ,/*min*/25,/*max*/ 25, 
				/*fail*/0.08,/*cost*/ 6]; //+flat
	}
	if (chip == CHIP_FORTRESS) {
		return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/4, /*minRange*/0, 
				/*maxRange*/3,/*cat*/CAT_DEF ,/*min*/0.40,/*max*/ 0.40, 
				/*fail*/0.06,/*cost*/ 8]; //+rel
	}
	if (chip == CHIP_SHOCK) {
	return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/0, /*minRange*/0, 
				/*maxRange*/6,/*cat*/CAT_ATK ,/*min*/5,/*max*/ 7, 
				/*fail*/0.30,/*cost*/ 2];
	} //zone
	if (chip == CHIP_PEBBLE) {
	return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/1, /*minRange*/0, 
				/*maxRange*/5,/*cat*/CAT_ATK ,/*min*/2,/*max*/ 17, 
				/*fail*/0.09,/*cost*/ 2];
	} //zone
	if (chip == CHIP_SPARK) {
	return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/3, /*minRange*/0, 
				/*maxRange*/10,/*cat*/CAT_ATK ,/*min*/8,/*max*/ 16, 
				/*fail*/0.04,/*cost*/ 3];
	} //passe au travers des obstacles
	if (chip == CHIP_ICE) {
	return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/0, /*minRange*/0, 
				/*maxRange*/8,/*cat*/CAT_ATK ,/*min*/17,/*max*/ 19, 
				/*fail*/0.05,/*cost*/ 4];
	} //zone
	if (chip == CHIP_ROCK) {
	return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/1, /*minRange*/2, 
				/*maxRange*/6,/*cat*/CAT_ATK ,/*min*/30,/*max*/ 31, 
				/*fail*/0.08,/*cost*/ 5];
	} //zone
	if (chip == CHIP_FLASH) {
	return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/1, /*minRange*/1, 
				/*maxRange*/7,/*cat*/CAT_ATK ,/*min*/19,/*max*/ 24, 
				/*fail*/0.01,/*cost*/ 4];
	} //zone
	if (chip == CHIP_FLAME) {
	return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/0, /*minRange*/2, 
				/*maxRange*/7,/*cat*/CAT_ATK ,/*min*/25,/*max*/ 27, 
				/*fail*/0.10,/*cost*/ 4];
	} //zone
	if (chip == CHIP_STALACTITE) {
	return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/3, /*minRange*/2, 
				/*maxRange*/7,/*cat*/CAT_ATK ,/*min*/64,/*max*/ 67, 
				/*fail*/0.20,/*cost*/ 6];
	} //zone
	if (chip == CHIP_LIGHTNING) {
	return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/0, /*minRange*/2, 
				/*maxRange*/6,/*cat*/CAT_ATK ,/*min*/35,/*max*/ 47, 
				/*fail*/0.07,/*cost*/ 4];
	} //zone
	if (chip == CHIP_ROCKFALL) {
	return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/1, /*minRange*/5, 
				/*maxRange*/7,/*cat*/CAT_ATK ,/*min*/48,/*max*/ 56, 
				/*fail*/0.08,/*cost*/ 7];
	} //zone
	if (chip == CHIP_ICEBERG) {
	return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/3, /*minRange*/3, 
				/*maxRange*/5,/*cat*/CAT_ATK ,/*min*/72,/*max*/ 80, 
				/*fail*/0.05,/*cost*/ 7];
	} //zone
	if (chip == CHIP_METEORITE) {
	return [/*actual cd*/getItem(chip, mychipsCd), /*cd*/3, /*minRange*/4, 
				/*maxRange*/8,/*cat*/CAT_ATK ,/*min*/70,/*max*/ 80, 
				/*fail*/0.04,/*cost*/ 8];
	} //zone
}

/**
 * [whatIsYourPowerLevel description]
 * calcul la puissance d'un poireau
 * @param  {[type]} leek [description]
 * @return {[type]}      [description]
 */
function whatIsYourPowerLevel(leek){
	if(leek==null){
		return 0;
	}
	return [/*force*/getLife(leek)*(1+getForce(leek)/100), 
			/*heal-def*/getLife(leek)*(1+getAgility(leek)/100)];//estimation de la fore à affiner
	//En fonction des chips et armes par exemple
}

/**
 * [compareleeks description]
 * compare la puissance de 2 poirreau, renvoie le plus fort.
 * @param  {[type]} leek1 [description]
 * @param  {[type]} leek2 [description]
 * @return {[type]}       [description]
 */
function compareleeks(leek1, leek2){
	var pow1 = whatIsYourPowerLevel(leek1);
	var pow2 = whatIsYourPowerLevel(leek2);
	if(C_IMPORTANCE_FORCE*pow1[0]+C_IMPORTANCE_AGILITY*pow1[1] > C_IMPORTANCE_FORCE*pow2[0]+C_IMPORTANCE_AGILITY*pow2[1]){
		return leek1;
	}
	return leek2;
}

/**
 * [doAction description]
 * @param  {[type]} action [description]
 * @param  {[type]} cible  [description]
 * @return {[type]}        [description]
 */
function doAction(action, cible){
	if(action==ACTION_USE_WEAPON){
		return doAction(action, cible, null, 0);
	}
	return BAD_ACTION_TYPE;
}

/**
 * [doAction description]
 * @param  {[type]} action [description]
 * @param  {[type]} cible  [description]
 * @param  {[type]} item   [description]
 * @return {[type]}        [description]
 */
function doAction(action, cible, item){
	if(action!=ACTION_MOVEAWAY&&action!=ACTION_MOVETOWARD){
		return doAction(action, cible, item, 0);
	}
	return BAD_ACTION_TYPE;
}

/**
 * fonction générique pour faire tout type d'action.
 * action : action à faire (dans la liste des globales)
 * cible : cible (un poireau, une cell)
 * item : un item à utiliser (une chip, une arme)
 * number : un nombre (pour les déplacements)
 * @return : [result, statBefore, statAfter]
 */
function doAction(action, cible, item, number){
	if(action==ACTION_MOVEAWAY){
		var cellStart = getCell();
		var result = moveAwayFromCell(cible, number);//Lv 19 => niv 5 : moveAwayFrom(leek, mp)
		var cellEnd = getCell();
		return[result, cellStart, cellEnd];
	}
	if(action==ACTION_MOVETOWARD){
		var cellStart = getCell();
		var result = moveTowardCell(cible, number);
		var cellEnd = getCell();
		return[result, cellStart, cellEnd];
	}
	if(action==ACTION_EQUIP_WEAPON){
		setWeapon(item);
		if(getWeapon()==-1){
			setWeapon(myWeapons[0]);
		}
		return [getWeapon()];
	}
	if(action==ACTION_USE_WEAPON){
		if(getWeapon()==-1){
			setWeapon(myWeapons[0]);
		}
		var lifeBefore = getLife(cible);
		var result = useWeapon(cible);
		var lifeAfter = getLife(cible);
		return [result, lifeBefore, lifeAfter];
	}
	if(action==ACITON_USE_CHIP){
		if(getItem(item, mychipsCd)!=null){
			var cat = myGetChipEffects(item)[CHIPEF_CAT];
			if(cat == CAT_ATK || cat == CAT_VIE){
				var lifeBefore = getLife(cible);
				var result = useChip(item, cible);
				var lifeAfter = getLife(cible);
				return [result, lifeBefore, lifeAfter];

			}
			return [useChip(item, cible)];
		}
	}
	return null;
}

/**
 * 
 * estime les dégats qu'une chip ou une arme entrée en paramètre peut infliger
 * @param  {[type]} item [description]
 * @return {[type]}      [description]
 */
function estimateDamage(item){

	if(getItem(item, mychipsCd)!=null){
		var effects = myGetChipEffects(item);
		if(effects[CHIPEF_CAT]==CAT_ATK){
			var force = getForce();
			return [effects[CHIPEF_STAT_MIN]*(1+force/100),effects[CHIPEF_STAT_MAX]*(1+force/100)];
		}
	}
	if(item==getWeapon()){
		var effects = myGetWeaponEffects(item);
		force = getForce();
		return [effects[WEAPONEF_DAMAGE_MIN]*(1+force/100),effects[WEAPONEF_DAMAGE_MAX]*(1+force/100)];
	}
	return 0;
}

/**
 * [initTurn description]
 * fonction d'initialisation du tour
 * @return {[type]} [description]
 */
function initTurn() {
	//Mise à jour du tour
	turn++;
	//Mise à jour des cooldowns
	var value = 0;
	for(var chip in myChips){
		value = max(0, getItem(chip, mychipsCd)-1);
		setItem(chip, value, mychipsCd);
	}
}

/**
 * [initGame description]
 * fonction d'initialisation de la partie
 * @return {[type]} [description]
 */
function initGame() {
	//initialisation des chips
	for(var chip in myChips){
		setItem(chip, 0, mychipsCd);
	}
	//initialisation de l'ennemie courant
	for(var enn in enemies){
		curentEnemy = compareleeks(curentEnemy, enn);
	}
}

//##################################################################################################################
//#                                                      MAIN                                                      #
//##################################################################################################################
initTurn();
if(turn==1){initGame();}

debug("##############################");

if(myGetWeaponEffects(getWeapon())[6/*Inline*/]==RANGE_INLINE){//Niv 7 : conditionner le comportement si l'autre
																// a une arme inline (rester à 5 de distance)

}